//Apply Plugins
plugins {
    id 'java-library'
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.gradle.userdev' version '7.0.142'
}
//Mod Info
version = minecraft_version + "-" + mod_version
group = mod_group_id
repositories {
    mavenLocal()
}
base {
    archivesName = mod_name
}
//Java Info
java.toolchain.languageVersion = JavaLanguageVersion.of(21)
println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
//Setup Runs
//minecraft.accessTransformers.file rootProject.file('src/main/resources/META-INF/accesstransformer.cfg')
runs {
    configureEach {
        systemProperty 'forge.logging.markers', 'REGISTRIES'
        systemProperty 'forge.logging.console.level', 'debug'
        systemProperty 'mixin.env.disableRefMap', 'true'
        modSource project.sourceSets.main
    }
    client {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
    }
    server {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
        programArgument '--nogui'
    }
    gameTestServer {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
    }
    data {
        workingDirectory project.file('run-data')
        programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
    }
}
sourceSets.main.resources { srcDir 'src/generated/resources' }
//Mod Dependencies
dependencies {
    implementation "net.neoforged:neoforge:${neo_version}"
}
//Mod Jar
jar {
    manifest {
        attributes([
            'Specification-Title'     : mod_name,
            'Specification-Vendor'    : mod_authors,
            'Specification-Version'   : mod_version,
            'Implementation-Title'    : project.name,
            'Implementation-Version'  : mod_version,
            'Implementation-Vendor'   : mod_authors,
            'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
            'Timestamp'               : System.currentTimeMillis(),
            'Built-On-Java'           : "${System.getProperty('java.vm.version')} (${System.getProperty('java.vm.vendor')})",
            'Build-On-Minecraft'      : minecraft_version
        ])
    }
}
//META_INF Files
tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
            minecraft_version: minecraft_version,
            minecraft_version_range: minecraft_version_range,
            neo_version: neo_version,
            neo_version_range: neo_version_range,
            loader_version_range: loader_version_range,
            mod_id: mod_id,
            mod_name: mod_name,
            mod_license: mod_license,
            mod_version: mod_version,
            mod_authors: mod_authors,
            mod_description: mod_description
    ]
    inputs.properties replaceProperties
    filesMatching(['META-INF/neoforge.mods.toml']) {
        expand replaceProperties + [project: project]
    }
}
//Publishing
publishing {
    publications {
        register('mavenJava', MavenPublication) {
            from components.java
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/repo"
        }
    }
}
//Java Compile
tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}
//InteliJ
idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}
